package concurrencytest.config;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;

/**
 * Main configuration class that controls how everything will run
 */
public interface Configuration extends Serializable {

    /**
     * How the test is going to run.
     */
    default ExecutionMode executionMode() {
        return ExecutionMode.AUTO;
    }

    /**
     * If true, the generated bytecode will be checked before the tests are run.
     * Usefull for debugging the generated classes with the checkpoints
     */
    default boolean checkClassesBytecode() {
        return true;
    }

    /**
     * How many tests will be run in parallel. The test runtime will try to instantiate new runners each time it encounters a 'branch',
     * a state that have more than one actor that is runnable, up to the number returned by this method.
     */
    default int parallelExecutions() {
        return 1;
    }

    /**
     * How is the tree represented in memory
     */
    default TreeMode treeMode() {
        return TreeMode.HEAP;
    }

    /**
     * How many times an actor is allowed to 'loop' - to be picked and end up in the same checkpoint before the scheduler have to pick another thread.
     * This is used to prevent infinte loops.
     */
    default int maxLoopIterations() {
        return 10;
    }

    /**
     * Controls the various timeouts
     */
    default CheckpointDurationConfiguration durationConfiguration() {
        return new CheckpointDurationConfiguration();
    }

    /**
     * Controls how the checkpoints will be injected
     */
    default CheckpointConfiguration checkpointConfiguration() {
        return new CheckpointConfiguration() {
        };
    }

    /**
     * List the classes that will have checkpoints injected
     */
    Collection<Class<?>> classesToInstrument();

    /**
     * main test class - usually the one annotated with @RunWith(ActorSchedulerRunner.class)
     */
    Class<?> mainTestClass();

    /**
     * The output folder to store the various files.
     */
    File outputFolder();

    default int maxWaitsOnSameObject() {
        return 2;
    }

}
